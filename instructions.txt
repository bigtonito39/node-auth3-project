Setup database and project

1-step : npm init -y (this creates the package.json)
2 step : npm add knex sqlite3 nodemon
3 step: npm install -g knex  (this is to install globally in order to be able to use the knex command which allows to use migrate and seed)
4 step: knex init  (this will build a knexfile.js)
5 step: in that file we only will keep development, and add the pool setup if you are using foreign key
6 step: on the knexfile under client paste this line:  useNullAsDefault: true, // A flag required for SQLite as well as

//make sure to include pool code if you are running a foreing key in you db
pool:{
    afterCreate: (conn, done) => {
      //runs after a conection is made to the sqlite engine
      conn.run("PRAGMA foreign_keys = ON", done); //turn 
    }
  }
  
7 step: run knex migrate:make create-cars-table  (this will create migrate folder with first file in it)
8 step: once you had typed your table, do knex migrate:latest to create database // make sure y ou change filename in the knexfile to your name of preference.
9 step: if you didnt like an update(ONLY IF YOU DECIDED THATS NOT WHAT YOU WANTED TO DO, and want to reverse a chance) --Run knex migrate:rollback

(if you git pull request a project that was already started on another computer, or from another user, in order to use knex, make sure npm install and npm install -g knex as well )
10 -setup the config.js file under data folder

SET UP Index file and package.json

1. make sure you npm install express helmet 
2. make sure that in the package.json file you are including the next set ups: "server": "nodemon index.js"
3. once you get db stuff ready.. time to move on to server side! so, remember your routers, index.js file, CRUD operation endpoints, 

Get project files structure and what each file represents
    
0  npm install bcryptjs nodemon
1   create a welcome folder with welcome-router.js / and folders with db name on it plus dbName-router.js and dbName-Model.js 
1.5 create index.js file with express, helmet, welcomerouter, customized error using server use and server.listen to test your welcome enpoint using 
npm run server to make sure basics are covered.
3 the dbname-model.js file we will be creating re usuable funtions that will use sqlite3 syntax/ functionality to communicate with our db.
2 the dbname-router.js file we will be creating the endpoints which will use our models
4 create a folder named auth and file called auth-router.js where you will have endpoints login and register
4.5 create a middleware funtion and have two files restric-middleware(to restric access if you are not logged in) and restrict role (to restric roles based on permissions, like admin)
5 on the restric role check how it takes a parameter which is the role which is being sent from users-router in this case as an argument.  
5.5 cgecj restric middleware and restric middleware to see how it gets created
6. the restricted-middleware.js file you will use it to create a middleware that will restrict an user to have access to data unless they are validated

SET UP WEB TOKEN

1. npm i jsonwebtoken
2. head over auth-router and import   const jwt = require("jsonwebtoken")
3. on auth-router create a payload const with userId and Role in it (see example in auth router as example)
3.5 - create a option const to add a expireIn funtionality to make token expire after certain time (see example in auth router)
4. on the same auth router create a  token const with secret that points to your .env file and your payload,  (see it in auth router as example)
5.send a Set-Cookie header with the value of the token = res.cookie("token", token)
6.make sure to create an .env file and set up a secret key in there like this one JWT_SECRET = "Lets Go mets!"
7.If you want to see the token when you login place the token const in the response (see it in auth router as example)
7.5 npm i cookie-parser and the import it and use it on the INDEX.JS File
7.6 npm i dotenv and place this code on package json "server": "nodemon -r dotenv/config index.js"
7.8 Go to insomnia, create an user and login and you will see welcome message and token
8. head over http://jwt.io if you want to see how your token looks like in each session by pasting your token in there -- Make sure to never add sensitive info like password because
of this

